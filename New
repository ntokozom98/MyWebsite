from tkinter import *
import tkinter as tk
from tkinter import ttk, messagebox
from BS_Upload import upload_file
from Delete_Func import delete

try:
    from ctypes import windll
    windll.shcore.SetProcessDpiAwareness(1)
except:
    pass

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Test")
        app_width = 1500
        app_height = 720
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        x = (screen_width / 2) - (app_width / 2)
        y = (screen_height / 3) - (app_height / 3)
        self.geometry(f"{app_width}x{app_height}+{int(x)}+{int(y)}")
        self.minsize(width=1300, height=720)
        self.maxsize(width=1920, height=1080)

        self.menu_frame = tk.Frame(self, bg="#124e6b", highlightbackground="black", highlightthickness=1)
        self.menu_frame.pack(side=tk.LEFT, fill=tk.Y)
        self.menu_frame.pack_propagate(False)
        self.menu_frame.configure(width=300)

        self.background_menuframe = Label(self.menu_frame)
        self.background_menuframe.place(x=0, y=0, relwidth=1, relheight=1)

        self.main_frame = tk.Frame(self, bg="white")
        self.main_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.create_buttons()
        self.show_page("main")

    def create_buttons(self):
        buttons_info = [
            ("Main", lambda: self.indicate(self.page1_indicate, "main")),
            ("Bluesheet", lambda: self.indicate(self.page2_indicate, "bluesheet")),
            ("Upload", lambda: self.indicate(self.page3_indicate, "upload")),
            ("Delete", lambda: self.indicate(self.page4_indicate, "delete")),
        ]
        
        self.indicators = []

        for index, (text, command) in enumerate(buttons_info):
            btn = tk.Button(self.menu_frame, text=text, font=("Bold", 18), fg="white", bd=0, bg="#031f3f",
                            padx=56, activebackground="#124edb", command=command)
            btn.grid(row=index, column=1, pady=20, padx=(10, 0), sticky="w")

            indicator = tk.Label(self.menu_frame, text="", bg="#124e6b")
            indicator.grid(row=index, column=0, sticky="ns", pady=20)
            self.indicators.append(indicator)

        self.page1_indicate = self.indicators[0]
        self.page2_indicate = self.indicators[1]
        self.page3_indicate = self.indicators[2]
        self.page4_indicate = self.indicators[3]

    def delete_pages(self):
        for frame in self.main_frame.winfo_children():
            frame.destroy()

    def indicate(self, lb, page):
        self.hide_indicators()
        lb.config(bg="white")
        self.delete_pages()
        self.show_page(page)

    def hide_indicators(self):
        for indicator in self.indicators:
            indicator.config(bg="#124e6b")

    def show_page(self, page):
        if page == "main":
            main_page = tk.Label(self.main_frame, text="Main Page", font=("Arial", 24), bg="white")
            main_page.pack(pady=20)
        elif page == "bluesheet":
            bluesheet_page = tk.Label(self.main_frame, text="Bluesheet Page", font=("Arial", 24), bg="white")
            bluesheet_page.pack(pady=20)
        elif page == "upload":
            upload_page = tk.Label(self.main_frame, text="Upload Page", font=("Arial", 24), bg="white")
            upload_page.pack(pady=20)
        elif page == "delete":
            delete_page = tk.Label(self.main_frame, text="Delete Page", font=("Arial", 24), bg="white")
            delete_page.pack(pady=20)

if __name__ == "__main__":
    app = App()
    app.mainloop()
