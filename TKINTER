import tkinter as tk
from tkinter import ttk, filedialog
import openpyxl
import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy.engine import URL
import numpy as np
from openpyxl import load_workbook, writer
import time
import pyodbc
from tkinter import *
from tkinter import filedialog
import pandas as pd

# connect local host
connection_string = (r'Driver=SQL Server;'
                     r'Server=UNKOWN-DEVICE;'
                     r'Database=Finance;'
                     r'Trusted_Connection=yes')
connection_url = URL.create(
    "mssql+pyodbc",
    query={"odbc_connect": connection_string}
)

engine = create_engine(connection_url)


# button for upload file
path2 = 'C:/Users/nonto/Downloads/Proj_Fin2023/testing.xlsx'
window = Tk()


def fileopen():
    filepath = filedialog.askopenfilename(
        filetypes=(("xlsx", "*.xlsx"), ("all files", "*.*")))  # ===assigns the path to filepath
    label = Label(window, text=filepath)  # ==Adds Label to window
    label.pack()
    df = pd.read_excel(filepath)  # ==reads the excel file by fetching it from its path
    df.to_sql("Transactions_Complete2", engine, schema='odb', if_exists="append", index=False)


# create DataFrame and assign new cols names


def load_data():
    path = "C:/Users/nonto/Downloads/Proj_Fin2023/DBEx.xlsx"
    workbook = openpyxl.load_workbook(path)
    sheet = workbook.active

    list_values = list(sheet.values)
    print(list_values)
    for col_name in list_values[0]:
        treeview.heading(col_name, text=col_name)

    for value_tuple in list_values[1:]:
        treeview.insert('', tk.END, values=value_tuple)


# add db connection/excel
# filename.to_excel(writer, startrow = writer.sheets['Sheet1'].max_row,index = False, Header = False)


def insert_row():
    ClassID = ClassID_entry.get()
    Transaction_Date = Transaction_Date_entry.get()
    Transaction_ID = Transaction_ID_entry.get()
    Amount = Amount_entry.get()
    Description_A = Description_A_entry.get()
    Description_B = Description_B_entry.get()
    Classification_A = Classification_A_entry.get()
    Classification_B = Classification_B_entry.get()
    Type = Type_entry.get()

    print(ClassID, Transaction_Date, Transaction_ID, Amount, Description_A, Description_B,
          Classification_A, Classification_B, Type)

    # Insert row into Excel sheet
    path = "C:/Users/nonto/Downloads/Proj_Fin2023/DBEx.xlsx"
    workbook = openpyxl.load_workbook(path)
    sheet = workbook.active
    row_values = [ClassID, Transaction_Date, Transaction_ID, Amount, Description_A, Description_B,
                  Classification_A, Classification_B, Type]
    sheet.append(row_values)
    workbook.save(path)

    # Insert row into treeview
    treeview.insert('', tk.END, values=row_values)

    # Clear the values
    ClassID_entry.delete(0, "end")
    ClassID_entry.insert(0, "ClassID")
    Transaction_Date_entry.delete(0, "end")
    Transaction_Date_entry.insert(0, "Date")
    Transaction_ID_entry.delete(0, "end")
    Transaction_ID_entry.insert(0, "TranID")
    Amount_entry.delete(0, "end")
    Amount_entry.insert(0, "Amount")
    Description_A_entry.delete(0, "end")
    Description_A_entry.insert(0, "DescA")
    Description_B_entry.insert(0, "DescB")
    Description_B_entry.delete(0, "end")
    Classification_A_entry.insert(0, "ClassA")
    Classification_A_entry.delete(0, "end")
    Classification_B_entry.insert(0, "ClassB")
    Classification_B_entry.delete(0, "end")
    Type_entry.delete(0, "end")
    Type_entry.insert(0, "Type")


root = tk.Tk()

style = ttk.Style(root)
root.tk.call("source", "forest-light.tcl")
root.tk.call("source", "forest-dark.tcl")
style.theme_use("forest-light")

frame = ttk.Frame(root)
frame.pack()

widgets_frame = ttk.LabelFrame(frame, text="Insert Row")
widgets_frame.grid(row=0, column=0, padx=20, pady=10)

ClassID_entry = ttk.Entry(widgets_frame)
ClassID_entry.insert(0, "ClassID")
ClassID_entry.bind("<FocusIn>", lambda e: ClassID_entry.delete('0', 'end'))
ClassID_entry.grid(row=0, column=0, padx=5, pady=(0, 5), sticky="ew")

Transaction_Date_entry = ttk.Entry(widgets_frame)
Transaction_Date_entry.insert(0, "Transaction_Date")
Transaction_Date_entry.bind("<FocusIn>", lambda e: Transaction_Date_entry.delete('0', 'end'))
Transaction_Date_entry.grid(row=0, column=3, padx=5, pady=(0, 5), sticky="ew")

Transaction_ID_entry = ttk.Entry(widgets_frame)
Transaction_ID_entry.insert(0, "Transaction_ID")
Transaction_ID_entry.bind("<FocusIn>", lambda e: Transaction_ID_entry.delete('0', 'end'))
Transaction_ID_entry.grid(row=0, column=6, padx=5, pady=(0, 5), sticky="ew")

Amount_entry = ttk.Entry(widgets_frame)
Amount_entry.insert(0, "Amount")
Amount_entry.bind("<FocusIn>", lambda e: Amount_entry.delete('0', 'end'))
Amount_entry.grid(row=0, column=9, padx=5, pady=(0, 5), sticky="ew")

Description_A_entry = ttk.Entry(widgets_frame)
Description_A_entry.insert(0, "Description_A")
Description_A_entry.bind("<FocusIn>", lambda e: Description_A_entry.delete('0', 'end'))
Description_A_entry.grid(row=1, column=0, padx=5, pady=(0, 5), sticky="ew")

Description_B_entry = ttk.Entry(widgets_frame)
Description_B_entry.insert(0, "Description_B")
Description_B_entry.bind("<FocusIn>", lambda e: Description_B_entry.delete('0', 'end'))
Description_B_entry.grid(row=0, column=1, padx=5, pady=(0, 5), sticky="ew")

Classification_A_entry = ttk.Entry(widgets_frame)
Classification_A_entry.insert(0, "Classification_A")
Classification_A_entry.bind("<FocusIn>", lambda e: Classification_A_entry.delete('0', 'end'))
Classification_A_entry.grid(row=1, column=1, padx=5, pady=(0, 5), sticky="ew")

Classification_B_entry = ttk.Entry(widgets_frame)
Classification_B_entry.insert(0, "Classification_B")
Classification_B_entry.bind("<FocusIn>", lambda e: Classification_B_entry.delete('0', 'end'))
Classification_B_entry.grid(row=1, column=3, padx=5, pady=(0, 5), sticky="ew")

Type_entry = ttk.Entry(widgets_frame)
Type_entry.insert(0, "Type")
Type_entry.bind("<FocusIn>", lambda e: Type_entry.delete('0', 'end'))
Type_entry.grid(row=1, column=6, padx=5, pady=(0, 5), sticky="ew")

button = ttk.Button(widgets_frame, text="Delete", command=insert_row)
button.grid(row=6, column=0, padx=5, pady=5, sticky="nsew")

button2 = tk.Button(widgets_frame, text='Open', command=fileopen)
button2.grid(row=6, column=1, padx=5, pady=5, sticky="nsew")

separator = ttk.Separator(widgets_frame)
separator.grid(row=7, column=0, padx=(20, 10), pady=10, sticky="ew")

treeFrame = ttk.Frame(frame)
treeFrame.grid(row=13, column=0, pady=12)
treeScroll = ttk.Scrollbar(treeFrame)
treeScroll.pack(side="right", fill="y")

cols = ("ClassID", "Transaction_Date", "Transaction_ID", "Amount", "Description_A", "Description_B",
        "Classification_A", "Classification_B", "Type")
treeview = ttk.Treeview(treeFrame, show="headings",
                        yscrollcommand=treeScroll.set, columns=cols, height=13)
treeview.column("ClassID", width=100)
treeview.column("Transaction_Date", width=100)
treeview.column("Transaction_ID", width=100)
treeview.column("ClassID", width=100)
treeview.column("Amount", width=100)
treeview.column("Description_A", width=100)
treeview.column("Description_B", width=100)
treeview.column("Classification_A", width=100)
treeview.column("Classification_B", width=100)
treeview.column("Type", width=100)

treeview.pack()
treeScroll.config(command=treeview.yview)
load_data()

root.mainloop()
